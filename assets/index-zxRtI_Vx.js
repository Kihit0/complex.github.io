var d=Object.defineProperty;var y=(o,e,r)=>e in o?d(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r;var l=(o,e,r)=>(y(o,typeof e!="symbol"?e+"":e,r),r);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))t(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&t(n)}).observe(document,{childList:!0,subtree:!0});function r(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function t(i){if(i.ep)return;i.ep=!0;const a=r(i);fetch(i.href,a)}})();class s{constructor(e){l(this,"logger");this.logger=e}}class m extends s{constructor(e){super(e)}calculator(e,r){const t={real:e.real+r.real,imaginary:e.imaginary+r.imaginary};return this.logger.log(`Add: (${e.real}, ${e.imaginary}) + (${r.real}, ${r.imaginary}) = (${t.real}, ${t.imaginary})`),t}}class f extends s{constructor(e){super(e)}isZero(e){return e.real===0&&e.imaginary===0}calculator(e,r){if(this.isZero(r))return this.logger.log("Error: Division by zero"),{real:NaN,imaginary:NaN};const t={real:r.real,imaginary:-r.imaginary},i=r.real*r.real+r.imaginary*r.imaginary,a={real:(e.real*t.real+e.imaginary*t.imaginary)/i,imaginary:(e.imaginary*t.real-e.real*t.imaginary)/i};return this.logger.log(`Divide: (${e.real}, ${e.imaginary}) / (${r.real}, ${r.imaginary}) = (${a.real}, ${a.imaginary})`),a}}class h{log(e){console.log(e)}}class p extends s{constructor(e){super(e)}calculator(e,r){const t={real:e.real*r.real-e.imaginary*r.imaginary,imaginary:e.real*r.imaginary+e.imaginary*r.real};return this.logger.log(`Multiply: (${e.real}, ${e.imaginary}) * (${r.real}, ${r.imaginary}) = (${t.real}, ${t.imaginary})`),t}}class $ extends s{constructor(e){super(e)}calculator(e,r){const t={real:e.real-r.real,imaginary:e.imaginary-r.imaginary};return this.logger.log(`Subtract: (${e.real}, ${e.imaginary}) - (${r.real}, ${r.imaginary}) = (${t.real}, ${t.imaginary})`),t}}class v{constructor(){l(this,"logger");l(this,"operation");this.operation=new Map,this.logger=new h}fill(){this.operation.set("add",new m(this.logger)),this.operation.set("subtract",new $(this.logger)),this.operation.set("multiply",new p(this.logger)),this.operation.set("divide",new f(this.logger))}getComplex(){const e=document.querySelector("#real1"),r=document.querySelector("#imaginary1"),t=document.querySelector("#real2"),i=document.querySelector("#imaginary2"),a={real:Number(e==null?void 0:e.value),imaginary:Number(r==null?void 0:r.value)},n={real:Number(t==null?void 0:t.value),imaginary:Number(i==null?void 0:i.value)};return[a,n]}viewResult(e,r){const t=document.querySelector("#result");t&&(t.innerHTML=`<div>${r[0].toUpperCase()+r.slice(1)}: (${e==null?void 0:e.real}, ${e==null?void 0:e.imaginary})</div>`)}init(){this.fill();const e=document.querySelector("#add"),r=document.querySelector("#subtract"),t=document.querySelector("#multiply"),i=document.querySelector("#divide");[e,r,t,i].forEach(a=>{a==null||a.addEventListener("click",n=>{var g;const c=n.target,u=this.getComplex();this.viewResult((g=this.operation.get(c.id))==null?void 0:g.calculator(u[0],u[1]),c.id)})})}run(){this.init()}}function N(){new v().run()}document.addEventListener("DOMContentLoaded",N);
